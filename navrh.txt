Návrh knihovny Arpar
-----------------------------

Vladimír Mach
Dominik Škoda



-- Definice argumentù --

Pro zadávání akceptovaných argumentù aplikací jsme se rozhodli použít variantu takovou, kde uživatel si nadefinuje vlastní objekt - tøídu - ve které si naspecifikuje jaké argumenty mají být rozeznávány pomocí promìnných a ty odpovídajícím zpùsobem oanotuje pomocí atributù urèených pro popis chování atributu. Pro definici se musí použít pouze promìnné (vlastnosti jsou pøeskakovány) oznaèené jako public (private se taktéž pøeskakují), protože pro zapsání naètené hodnoty argumentu musíme mít možnost ji do objektu pomocí reflexe zapsat.

Poté, co si uživatel knihovny takto pøipraví objekt s požadovanými argumenty, tak jej pøedá knihovnì, ta už si pomocí reflexe zjistí jaké argumenty s jakými parametry jsou zadávány a pøipraví vnitøní struktury. Poté zavoláním metody Parse se provede naètení hodnot a zjištìné hodnoty argumentù jsou zapsány do uživatelského objektu.

Pro anotaci jsou k dispozici tyto definované atributy:
 - Argument - základní atribut pro oznaèení že daná promìnná má být považována za argument
 - BoundedArgument - specializovaný atribut, který dìdí ze základní Argument a navíc umožòuje nastavit meze na hodnotu argumentu, smí být použit pouze pro anotování promìnných typu int (knihovna toto kontroluje)
 - ChoicesArgument - specializovaný atribut, který taktéž dìdí ze základní Argument a navíc umožòuje nastavit enumeraci stringových hodnot, kterých argument mùže nabývat. Tento atribut smí být použit pouze pro anotování promìnných typu string (knihovna toto také kontroluje).
 - ArgumentAlias - atribut pro pøidávání dalších aliasù daného argumentu. Jejich poèet není omezen (pouze ze kontroluje unikátnost jména napøíè všemi argumenty)

U každého atributu je nutné specifikovat jeho jméno, pod kterým bude rozpoznán mezi argumenty, kromì tohoto jména mùže mít argument libovolné množství dalších jmen - aliasù. Každé jméno mùže být dvojího typu: Long nebo Short pro rozlišení jestli se jedná o krátkou nebo dlouhou volbu (liší se prefixem pøed jménem). Pro snazší používání není nutné typ jména urèovat a jako výchozí hodnota se použije dlouhá varianta.

Výchozí nastavení obsahuje takto nastavené prefixy:
dvì pomlèky (--) pro dlouhou volbu,
jednu pomlèku (-) pro krátkou volbu.

Tyto prefixy jdou snadno zmìnit zmìnou statických vlastností ShortOptionPrefix resp. LongOptionPrefix u tøídy ArgumentParser.

u všech typù atributù lze dále specifikovat:
Description - Popisek, který se používá pro generování dokumentace argumentù-
IsMandatory - pokud je hodnota nastavena na true, tak pokud tento argument nebude použit, tak parser vyvolá vyjímku.
ValueRequirements - TODO


U BoundedArgument, který lze aplikovat na promìnné typu int, lze navíc specifikovat:
LowBound - dolní mez pro hodnoty
HighBound - horní mez pro hodnoty

U ChoicesArgument, který lze aplikovat na promìnné typu string, lze navíc specifikovat:
Choices - pole stringù hodnot, kterých smí argument nabývat.

Kromì tohoto pole lze využít i upraveného konstruktoru atributu ChoicesArgument, který umožòuje tento pohodlnìjší zápis:

    [ChoicesArgument("gender", "Male", "Female")]
    public string Gender = "Male";

tento zápis je ekvivalentní zápisu:

    [ChoicesArgument("gender", Choices = new string[] { "Male", "Female" })]
    public string Gender = "Male";


Výchozí hodnoty argumentù lze snadno specifikovat takto:

        [Argument("maxlen")]
        public int MaximumLenght = 16;

Pokud nebude specifikován atribut --maxlen (pokud není urèen typ parametru, jako výchozí se bere dlouhá varianta), tak jeho hodnota bude 16, pokud budou napøíklad pøedány tyto argumenty: "--maxlen 26" tak se jeho hodnota pøepíše na 26.

Hodnota parametru na pøíkazové øádce mùže být zadána tìmito dvìma zpùsoby:
	
		-len 5
		-len=5
	
Oba tyto zpùsoby jsou rovnocenné.

Pokud bude mít parametr typu string definovanou hodnotu volitelnì a hodnota bude moci zaèínat pomlèkou, pak argumenty zapsane takto:

		-str -opt
		
budou považovány za dva rùzné argumenty a ne za argument -str a jeho hodnotu -opt. Bude-li potøeba aby stringový argument mìl hodnotu zaèínající pomlèkou je tøeba tento zápis:

		-str=-opt
		
Argumenty, které mají specifikování hodnoty zakázáno musejí být typu bool.

Vyjímky:
Pokud BoundedArgument bude definován u promìnné, která není typu int - ArgumentException
Pokud výchozí hodnota promìnné, která má definované meze, není v tìchto mezích - ArgumentOutOfRangeException
Pokud ChoicesArgument bude definován u promìnné, která není typu string - ArgumentException
Pokud výchozí hodnota promìnné, která má definované možnosti, není jedna z tìchto možností - ArgumentOutOfRangeException
Pokud bude definováno více voleb stejného jména - DuplicateArgumentException
Pokud pøi parsování nejsou naplnìné všechny promìnné, které jsou vyžadovanou volbou - ArgumentException
Pokud se pøi parsování vyskytne parametr, který nebyl definovaný a nejedná se o obyèejný parametr - ArgumentException
Pokud pøi parsování bude jeden argument zadán vícekrát - ArgumentException
Pokud bude specifikována hodnota atributu, který to má zakázané - ArgumentException
Pokud nebude specifikována hodnota atributy, který to vyžaduje - ArgumentException
Pokud specifikace hodnoty atributu, který má daný seznam hodnot, není ze seznamu - ArgumentException
Pokud specifikovaná hodnota atributu, který má dané hranice není v rozsahu - ArgumentOutOfRangeException
Pokud promenna atributu bude nepodporovaneho typu - ArgumentException

Všechny tyto vyjimky obsahují zprávu o podrobnostech, kterou je vhodné vypsat uživateli programu.

Common arguments---TODO
Seznam obyèejných parametrù lze definovat anotací CommonArgument, ve které se specifikuje popis parametru a to, zda je povinný. Poøadí obyèejných parametrù je dáno poøadím jejich anotací. Takto také budou vypsány požadavky na obyèejné parametry v dokumentaci voleb programu.
Seznam obyèejných parametrù lze po rozparsování získat z parseru z property CommonArguments.
pøíklad použití:
[CommonArgument("InputFile", IsMandatory=true)]

Obyèejné parametry jsou nepojmenované stringové hodnoty, které se programu pøedávají v daném poøadí.
Mùžou být povinné i nepovinné. Po rozparsování dostane Programátor jejich seznam. Pøes obyèejné parametry
lze jednoduše specifikovat napøíklad vstupní a výstupní soubor, nebo internetová adresa. Díky pevnému
poøadí tìchto parametrù není tøeba k jejich rozlišení speciálních voleb. 